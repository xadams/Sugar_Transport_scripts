#!/usr/bin/env bash
# This program should generate a job script from input

if [[ "$1" == -h || "$1" == --help ]]; then
  echo "gpujob output input runtime [walltime]"
  exit
fi

if [ "$#" -lt 3 ]; then
  echo "Less than 3 arguments supplied, starting interactive session."
  #begin usual interactive session
  echo -n "Enter the output file name: "
  read name
  echo -n "Enter input file name: "
  read input
  if [ -f $input.xsc ]; then
      first=$(egrep "0 0 0" $input.xsc | cut -f 1 -s -d ' ')
      start=$((first/500000))
      echo "Starting at step $first ($start ns)"
  else
      echo "Input file $input.xsc not found"
      echo -n "Continue anyway? (y/n) "
      read cont
      if [ $cont = "n" ]; then
          exit
      fi
  fi
  
  echo -n "Enter run time in ns (enter "end" to specify end time): "
  read ns
  if [ $ns = "end" ]; then
      echo -n "Enter the end time (in ns): "
      read end
      last=$(($end*500000))
      steps=$(($last-$first))
  fi
  if [ -z "$ns" ]; then
      echo -n "Enter run time (in steps):"
      read steps
  fi
  if [ -z "$steps" ]; then
       steps=$(($ns*500000))
  fi
  echo -n "Enter your wall time in whole hours (if known): "
  read walltime
 
  if [ -z "$walltime" ]; then
       walltime=$(($steps*2/500000))
  fi
else
  echo Working from command line arguments
  name=$1
  input=$2
  ns=$3
  steps=$(($ns*500000))
  if [[ ! -z $4 ]]; then
    echo setting walltime from command line
    walltime=$4
  elif [ -z $4 ]; then
    walltime=$(($steps*2/500000))
  fi
  if [ -f $input.xsc ]; then
      first=$(egrep "0 0 0" $input.xsc | cut -f 1 -s -d ' ')
      start=$((first/500000))
      echo "Starting at step $first ($start ns)"
  fi
fi

pre=$(pwd | cut -f 5 -d '/')

echo "#!/bin/bash" | cat > $name.job
echo "#SBATCH --job-name=${pre}_${name}" | cat >> $name.job
echo "#SBATCH -t $walltime:00:00" | cat >> $name.job
cat ~/bin/gputemplate >> $name.job
echo "/home/jphillip/NAMD_2.12b1_Linux-x86_64-multicore-CUDA/namd2 +idlepoll +p \$SLURM_NPROCS +pemap 0-13+14 $name.inp>& $name.log" | cat >> $name.job
#echo "/home/jphillip/NAMD_binaries/NAMD_LATEST_Linux-x86_64-multicore-Bridges-CUDA/namd2 +idlepoll +p \$SLURM_NPROCS +pemap 0-13+14 $name.inp>& $name.log" | cat >> $name.job
echo "transfer $name" | cat >> $name.job

cat ~/bin/inptemplate1 > $name.inp
echo "outputname        $name;" | cat >> $name.inp
echo "set inputname    $input;" | cat >> $name.inp
if [ -z $first ]; then
    cat ~/bin/firsttstemplate >> $name.inp
else
    echo "firsttimestep   $first;" | cat >> $name.inp
fi
# if the simulation is over 2 ns, log at the a reduced rate
if [ $steps -ge 1000000 ]; then
    cat ~/bin/inptemplatelong >> $name.inp
else
    cat ~/bin/inptemplate2 >> $name.inp
fi
echo "# run" | cat >> $name.inp
if [[ ! -z $first ]]; then
    total=$(($steps+$first))
    echo "numsteps          $total;" | cat >>$name.inp
fi
echo "run               $steps;" | cat >> $name.inp

echo "Setting walltime as $walltime hours"

